//
// Copyright (C) 2006 United States Government as represented by the
// Administrator of the National Aeronautics and Space Administration
// (NASA).  All Rights Reserved.
//
// This software is distributed under the NASA Open Source Agreement
// (NOSA), version 1.3.  The NOSA has been approved by the Open Source
// Initiative.  See the file NOSA-1.3-JPF at the top of the distribution
// directory tree for the complete NOSA document.
//
// THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY
// KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
// LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
// SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
// A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT
// THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT
// DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE.
//
package gov.nasa.jpf.util.json;

/**
 * Token that is generated by JSONLexer.
 * @author Ivan Mushketik
 */
public class Token {

  // Types of JSON tokens
  public enum Type {
    DocumentEnd,
    ObjectStart, ObjectEnd,
    ArrayStart, ArrayEnd,
    CGCallParamsStart, CGCallParamsEnd,
    Comma,
    KeyValueSeparator,
    Number,
    String,
    Identificator};

  private Type type;
  // Representation of token in input stream
  private String value;

  public Token(Type type, String value) {
    this.type = type;
    this.value = value;
  }

  public Type getType() {
    return type;
  }

  public String getValue() {
    return value;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj instanceof Token) {
      Token token = (Token) obj;

      if (token.type != this.type) {
        return false;
      }
      if (token.value == null && this.value == null) {
        return true;
      }
      if (token.value != null && this.value != null) {
        return token.value.equals(this.value);
      }

      return false;
    }

    return false;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();

    sb.append("Token (");
    sb.append(type);
    sb.append(", '");
    sb.append(value);
    sb.append("')");

    return sb.toString();
  }
}
